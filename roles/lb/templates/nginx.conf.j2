user www-data;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
}

# HTTP负载均衡配置
http {

    log_format main '[$time_local] - '
                     'Request IP: $remote_addr - '
                     'Host: $http_host - '
                     'Path: "$request"'
                     'Status: $status BodyBytesSent: $body_bytes_sent '
                     'Referer: "$http_referer" '
                     'UserAgent: "$http_user_agent" '
                     'XForwardedFor: "$http_x_forwarded_for" '
                     'Upgrade: $http_upgrade Connection: $http_connection '
                     'CacheStatus: $upstream_cache_status '
                     'RequestTime: $request_time';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    client_max_body_size 102400m;

#    # HTTP Ingress-Nginx负载均衡
#    upstream ingress-nginx-http {
#        server 192.168.235.214:80;
#        server 192.168.235.215:80;
#        server 192.168.235.216:80;
#    }
#
#    # HTTPS Ingress-Nginx负载均衡
#    upstream ingress-nginx-https {
#        server 192.168.235.214:443;
#        server 192.168.235.215:443;
#        server 192.168.235.216:443;
#    }
#
#    # HTTP负载均衡
#    server {
#        listen 80;
#
#        location / {
#            proxy_pass http://ingress-nginx-http;  # 指定 HTTP 上游
#            proxy_set_header Host $host;
#            proxy_set_header X-Real-IP $remote_addr;
#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#            proxy_set_header X-Forwarded-Proto $scheme;
#        }
#        # WebSocket 请求代理转发
#        location /api/v1/message/websocket {
#            proxy_pass http://ingress-nginx-http;  # 将请求转发到 Nginx 上游集群
#            proxy_http_version 1.1;  # 必须使用 HTTP/1.1 来支持 WebSocket
#            proxy_set_header Upgrade $http_upgrade;  # 设置 Upgrade 头以支持 WebSocket 协议
#            proxy_set_header Connection "upgrade";  # 设置 Connection 头以确认升级请求
#            proxy_set_header Host $host;
#            proxy_set_header X-Real-IP $remote_addr;
#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#            proxy_set_header X-Forwarded-Proto $scheme;
#
#            # 设置超时时间，确保 WebSocket 连接能够长时间保持
#            proxy_read_timeout 86400s;
#            proxy_send_timeout 86400s;
#        }
#
#        # WebSocket 请求代理转发（统一处理所有 wss 协议请求）
#        location ~* ^/api/notice/websocket {
#            proxy_pass http://ingress-nginx-http;  # 将请求转发到 Nginx 上游集群
#            proxy_http_version 1.1;  # 必须使用 HTTP/1.1 来支持 WebSocket
#            proxy_set_header Upgrade $http_upgrade;  # 设置 Upgrade 头以支持 WebSocket 协议
#            proxy_set_header Connection "upgrade";  # 设置 Connection 头以确认升级请求
#            proxy_set_header Host $host;
#            proxy_set_header X-Real-IP $remote_addr;
#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#            proxy_set_header X-Forwarded-Proto $scheme;
#
#            # 设置超时时间，确保 WebSocket 连接能够长时间保持
#            proxy_read_timeout 86400s;
#            proxy_send_timeout 86400s;
#        }
#    }
#
#    # HTTPS负载均衡
#    server {
#        listen 443 ssl;
#        ssl_certificate /etc/nginx/cret/nginx/bytedance.indc.vnet.com.pem;
#        ssl_certificate_key /etc/nginx/cret/nginx/bytedance.indc.vnet.com.key;
#        ssl_protocols TLSv1.2 TLSv1.3;
#        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
#        ssl_prefer_server_ciphers on;
#
#
#        location / {
#            proxy_pass https://ingress-nginx-https;  # 指定 HTTPS 上游
#            proxy_set_header Host $host;
#            proxy_set_header X-Real-IP $remote_addr;
#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#            proxy_set_header X-Forwarded-Proto $scheme;
#        }
#        # WebSocket 请求代理转发
#        location /api/v1/message/websocket {
#            proxy_pass https://ingress-nginx-https;  # 将请求转发到 Nginx 上游集群
#            proxy_http_version 1.1;  # 必须使用 HTTP/1.1 来支持 WebSocket
#            proxy_set_header Upgrade $http_upgrade;  # 设置 Upgrade 头以支持 WebSocket 协议
#            proxy_set_header Connection "upgrade";  # 设置 Connection 头以确认升级请求
#            proxy_set_header Host $host;
#            proxy_set_header X-Real-IP $remote_addr;
#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#            proxy_set_header X-Forwarded-Proto $scheme;
#
#            # 设置超时时间，确保 WebSocket 连接能够长时间保持
#            proxy_read_timeout 86400s;
#            proxy_send_timeout 86400s;
#        }
#
#        # WebSocket 请求代理转发（统一处理所有 wss 协议请求）
#        location ~* ^/api/notice/websocket {
#            proxy_pass https://ingress-nginx-https;  # 将请求转发到 Nginx 上游集群
#            proxy_http_version 1.1;  # 必须使用 HTTP/1.1 来支持 WebSocket
#            proxy_set_header Upgrade $http_upgrade;  # 设置 Upgrade 头以支持 WebSocket 协议
#            proxy_set_header Connection "upgrade";  # 设置 Connection 头以确认升级请求
#            proxy_set_header Host $host;
#            proxy_set_header X-Real-IP $remote_addr;
#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#            proxy_set_header X-Forwarded-Proto $scheme;
#
#            # 设置超时时间，确保 WebSocket 连接能够长时间保持
#            proxy_read_timeout 86400s;
#            proxy_send_timeout 86400s;
#        }
#    }
}

# 四层负载均衡配置 (TCP)
stream {
    log_format main '$remote_addr $upstream_addr - [$time_local] $status $upstream_bytes_sent';
    access_log /var/log/nginx/k8s-access.log main;

    # k8s-apiserver负载均衡
    upstream k8s-apiserver {
        {% for host in groups['ha'] %}
        server {{ host }}:6443;  # 动态生成Master节点
        {% endfor %}
    }

    # Master apiserver负载均衡
    server {
        listen {{ lb_port }};  # 避免与6443冲突
        proxy_pass k8s-apiserver;
    }
}
