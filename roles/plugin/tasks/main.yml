---
- name: 获取 Kubernetes 版本
  become: yes
  shell: kubectl version | grep Server | awk '{print $3}'
  register: k8s_version
  changed_when: false

- name: 提取 Kubernetes 主版本号 {{ k8s_version }}
  become: yes
  set_fact:
    k8s_major_minor_version: "{{ k8s_version.stdout | regex_replace('^v?(\\d+\\.\\d+).*', '\\1') }}"

- name: 根据 Kubernetes 版本选择 Calico 版本
  become: yes
  set_fact:
    calico_version: "{{ k8s_calico_version_map[k8s_major_minor_version] | default(default_calico_version) }}"
  when: k8s_major_minor_version is defined

- name: 根据 Kubernetes 版本选择 ingress-nginx 版本
  become: yes
  set_fact:
    ingress_version: "{{ k8s_ingress_version_map[k8s_major_minor_version] | default(default_ingress_version) }}"
  when: k8s_major_minor_version is defined

- name: 打印 Kubernetes 版本和组件版本（一行一条）
  debug:
    msg: "{{ item }}"
  loop:
    - "Kubernetes 版本: {{ k8s_major_minor_version }}"
    - "选择的 Calico 版本: {{ calico_version }}"
    - "选择的 ingress-nginx 版本: {{ ingress_version }}"

- name: 创建相关目录
  become: yes
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ k8s_app }}"
    - "{{ ingress_app }}"
    - "{{ calico_app }}"
    - "{{ openebs_app }}"

# 增强版 Calico 下载任务
- name: 处理 Calico 网络插件
  block:
    - name: 检查 Calico 文件是否已存在
      become: yes
      stat:
        path: "{{ calico_app }}/calico-{{ calico_version }}.yaml"
      register: calico_file
      
    - name: 下载 Calico YAML 文件（使用 wget，带重试）
      become: yes
      shell: |
        wget --tries=5 --waitretry=10 --timeout=30 --no-check-certificate \
             --user-agent="Ansible/{{ ansible_version }}" \
             -O "{{ calico_app }}/calico-{{ calico_version }}.yaml" \
             "{{ ghproxy }}/https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/calico.yaml"
      args:
        executable: /bin/bash
        warn: false  # 禁用该任务的命令警告
      register: download_result
      until: download_result.rc == 0
      retries: 5
      delay: 10
      when:
        - calico_version is defined
        - not calico_file.stat.exists | default(false)

    - name: 修改 Calico YAML 文件，添加 IP_AUTODETECTION_METHOD
      become: yes
      shell: |
        export PATH=$PATH:/usr/local/bin
        sed -i "/k8s,bgp/a\            - name: IP_AUTODETECTION_METHOD\n              value: {{ calico_network }}" "{{ calico_app }}/calico-{{ calico_version }}.yaml"
      when: 
        - calico_version is defined
        - download_result is succeeded or calico_file.stat.exists

    - name: 部署 Calico 网络插件
      become: yes
      shell: kubectl apply -f "{{ calico_app }}/calico-{{ calico_version }}.yaml"
      when: calico_version is defined

  rescue:
    - name: 清理可能下载的不完整文件
      become: yes
      file:
        path: "{{ calico_app }}/calico-{{ calico_version }}.yaml"
        state: absent
      ignore_errors: yes
    - fail:
        msg: "Calico 处理失败，请检查网络连接或代理设置"
  when: calico_version is defined

# 增强版 ingress-nginx 下载任务
- name: 处理 ingress-nginx
  block:
    - name: 检查 ingress-nginx 文件是否已存在
      become: yes
      stat:
        path: "{{ ingress_app }}/ingress-nginx-{{ ingress_version }}.yaml"
      register: ingress_file
      
    - name: 下载 ingress-nginx YAML 文件（使用 wget，带重试）
      become: yes
      shell: |
        wget --tries=5 --waitretry=10 --timeout=30 --no-check-certificate \
             --user-agent="Ansible/{{ ansible_version }}" \
             -O "{{ ingress_app }}/ingress-nginx-{{ ingress_version }}.yaml" \
             "{{ ghproxy }}/https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-{{ ingress_version }}/deploy/static/provider/cloud/deploy.yaml"
      args:
        executable: /bin/bash
        warn: false  # 禁用该任务的命令警告
      register: download_result
      until: download_result.rc == 0
      retries: 5
      delay: 10
      when:
        - ingress_version is defined
        - not ingress_file.stat.exists | default(false)

    - name: 修改镜像地址为阿里云镜像
      become: yes
      shell: |
        set -e
        yaml_file="{{ ingress_app }}/ingress-nginx-{{ ingress_version }}.yaml"
    
        echo "[INFO] 开始替换镜像地址: $yaml_file"
    
        # 初始替换，去掉 @sha256
        sed -E -i \
          -e 's|registry.k8s.io/ingress-nginx/controller:([^@]*)(@sha256:[a-f0-9]+)?|registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:\1|g' \
          -e 's|registry.k8s.io/ingress-nginx/kube-webhook-certgen:([^@]*)(@sha256:[a-f0-9]+)?|registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:\1|g' \
          "$yaml_file"
    
        # 检查是否还有错误路径，做补救
        if grep -q 'registry.cn-hangzhou.aliyuncs.com/google_containers/ingress-nginx/kube-webhook-certgen' "$yaml_file"; then
          echo "[WARN] webhook-certgen 路径仍包含 ingress-nginx，执行补救替换..."
          sed -i 's|registry.cn-hangzhou.aliyuncs.com/google_containers/ingress-nginx/kube-webhook-certgen|registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen|g' "$yaml_file"
        else
          echo "[INFO] webhook-certgen 镜像路径已正确。"
        fi
    
        if grep -q 'registry.cn-hangzhou.aliyuncs.com/google_containers/ingress-nginx/controller' "$yaml_file"; then
          echo "[WARN] controller 路径仍包含 ingress-nginx，执行补救替换..."
          sed -i 's|registry.cn-hangzhou.aliyuncs.com/google_containers/ingress-nginx/controller|registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller|g' "$yaml_file"
        else
          echo "[INFO] nginx-ingress-controller 镜像路径已正确。"
        fi
      when:
        - ingress_version is defined
        - download_result is succeeded or ingress_file.stat.exists

    - name: 打印替换后的镜像配置
      become: yes
      shell: "grep 'image: registry.cn-hangzhou.aliyuncs.com' '{{ ingress_app }}/ingress-nginx-{{ ingress_version }}.yaml'"
      register: grep_result
    
    - name: 输出镜像行
      debug:
        var: grep_result.stdout_lines

    - name: 修改 ingress-nginx YAML 文件 开启 hostNetwork 网络模式并添加 label 标签
      become: yes
      shell: |
        export PATH=$PATH:/usr/local/bin
        awk '
          /kind: Deployment/ { in_deployment=1; print $0; next }
          in_deployment && /containers:/ { 
            print "      hostNetwork: true"; 
            print $0; 
            next 
          }
          in_deployment && /kubernetes.io\/os: linux/ { 
            print "        {{ ingres_label }}"; 
            next 
          }
          in_deployment && /kind:/ && $0 !~ /Deployment/ { in_deployment=0 }
          { print $0 }
        ' "{{ ingress_app }}/ingress-nginx-{{ ingress_version }}.yaml" > temp.yaml && mv temp.yaml "{{ ingress_app }}/ingress-nginx-{{ ingress_version }}.yaml"
      when: 
        - ingress_version is defined
        - download_result is succeeded or ingress_file.stat.exists

    - name: 部署 ingress-nginx
      shell: kubectl apply -f "{{ ingress_app }}/ingress-nginx-{{ ingress_version }}.yaml"
      when: ingress_version is defined

  rescue:
    - name: 清理可能下载的不完整文件
      become: yes
      file:
        path: "{{ ingress_app }}/ingress-nginx-{{ ingress_version }}.yaml"
        state: absent
      ignore_errors: yes
    - fail:
        msg: "ingress-nginx 处理失败，请检查网络连接或代理设置"
  when: ingress_version is defined

# 其余原有任务保持不变
- name: 拷贝 openebs yaml 文件
  become: yes
  template: src="openebs/{{item.key}}" dest="{{openebs_app}}/{{item.value}}"
  with_dict:
    - {"openebs-hostpath.yaml.j2":"openebs-hostpath.yaml"}

- name: 部署 openebs 组件
  shell: kubectl apply -f "{{ openebs_app }}/openebs-hostpath.yaml"
  args:
    warn: false

# 以下命令是: 查找 {{ k8s_app }} 目录里面所有的 yaml 进行依次 apply 部署到集群
#- name: 执行 kubectl apply
#  become: yes
#  shell: |
#    export PATH=$PATH:/usr/local/bin
#    for dir in $(find . -type f -name "*.yaml" -exec dirname {} \; | sort -u); do kubectl apply -f "$dir"; done
#  args:
#    chdir: "{{ k8s_app }}"
#  register: apply_result
#  retries: 3
#  delay: 10
#  until: apply_result is succeeded

- name: 打印为 ingress 打标签命令
  become: yes
  shell: |
    export PATH=$PATH:/usr/local/bin
    echo "kubectl label nodes xxxx ingress/type=nginx 部署完需要重新 kubectl apply -f 提交一下配置文件, 因为默认没打标签有些配置没提交上"
  register: ingress
  changed_when: false

- name: 格式化输出 ingress 重新提交命令
  become: yes
  debug:
    msg: "{{ ingress.stdout_lines }}"

- name: 查看 k8s 集群证书到期时间
  become: yes
  shell: kubeadm certs check-expiration | sed -n '/CERTIFICATE/, $p'
  register: certs
  changed_when: false

- name: 格式化输出 k8s 证书到期时间
  become: yes
  debug:
    msg: "{{ certs.stdout_lines }}"

- name: 查看集群状态
  become: yes
  shell: kubectl get node -o wide
  register: node_status
  changed_when: false

- name: 格式化输出集群状态
  become: yes
  debug:
    msg: "{{ node_status.stdout_lines }}"

- name: 查看POD状态
  become: yes
  shell: kubectl get pod -A -o wide
  register: pod_status
  changed_when: false

- name: 格式化输出POD状态
  become: yes
  debug:
    msg: "{{ pod_status.stdout_lines }}"
